-----11/6/23-----
fixed swagger UI
made test project for generating every class -> it uses spring boot 2
todo:
	-fix data types (Accuracy,...) DONE
	-make swagger post request generate OffsetDateTime.now() DONE
	-add request builder with parameters (construct the body from these parameters) by making a Client DONE
	-make html form for client DONE
	-fix api annotations for swagger ui (+transfersapi)
	-controller if statements for building the response DONE
	- Location Header = uri of created subscription DONE
	- notifURI = client address DONE (in env variables like with apiRoot)
	-add database DONE
	-make schema for database DONE (with jsonb)
	-query filters for subs INPROGRESS (ready for clientURI)
	-make some fake test data (for example for NFLoad) DONE
	-massage the test data DONE (make classes for it and for prometheus request)
	-save notifications to 2nd postges db DONE
	-save massaged Prometheus data (NwdaNotification Info attributes) to a 3rd DB(Influx or Timescaledb) DONE (for NFload)
	-graphana the data DONE (Could graphana the massaged data as well)
	-implement periodic notifications DONE (sends post to client with notifURI after making the notifications from Prometheus data)
	-simple api for client receiving notifications (just a controller mapping for notifications + display below the form) DONE
	-do the NF_LOAD test DONE (maybe add an nf simulated container)
	-make 2 client dbs (one for sub responses and one for notifications) same as server

	-update and delete subs
	-add another postgres db for grouping the data based on time windows of 1hour
	-implement immediate reporting & time_offset (notify about grouped data)
	-implement with real consumer nfs using the client already made (nrf for nf load)  OR add in seperate containers: client db to store api responses + client logic for subscribing and context transfers
	-get real data and graphana it
	-do another use case (UE_Mobility)
	
	OPTIONAL:
	-implement transfer (use 29552-h40.pdf 5.4 )
	-find an mltf use case and implement it with the given data (for example predict nfload going over 0.9) 
	-look at data collection architecture and implement one on the network (kafka broker)
	-complete other use cases and consumer connections
	-implement mlmodel api for mtlf/anlf seperation
	-implement data management api
	-solve ml model storage problem
	-implement complete test case for multiple nwdafs (with/without mtlf)
	-Anlf SDK
-----19/6/23-----
fixed up to NwdafEvent
-----20/6/23-----
fixed datatypes
-----23/6/23-----
fixed OffsetDateTime
fixed byte[] with @Schema
request is working
removed type annotations in oneof interfaces
-----27/6/23-----
test run for NF_LOAD
ClientApp for NF_LOAD + database from container (error with nnwdaf_sub as property of event_sub)
-----28/6/23-----
Realised i have to change repository from jdbc to jpa and create a class for the table (will use jsonb)
request builder almost done , only EventSubscription attributes left
form will use simple String types and not the full object
----3/7/23-------
Finished request builder
Changed to jpa
Fixed http entity not giving headers and body back to client -> changed to response entity type
Started making form
----7/7/23-------
Build form up to basic NF_LOAD test
Launched Prometheus metrics containers that get metrics from other containers (postman post requests)
----11/7/23------
Connected to Prometheus and made post request for cpu metrics from any container by specifying its name (promql_client project)
Then did a test by sending a NwdaNotification object to the client every 1 second after pulling the new cpu load
Connected 2nd postgres database for storing notifications (uses the same server)
Implemented controller response for notifMethod and repPeriod
fixed storing notification (DataSourceConfig was missing Qualifier annotation in notifDbConfig)
---14/7/23-----
Fixed notify (now works for 500ms minimum intervals and provides 1sec minimum periodic notifications)
Ran test for 3 clients and 20 active subscriptions
Compiled project to docker images (error with thymeleaf parsing and finding repo table class)
---15/7/23-----
finished docker compose for 5 clients
ran benchmarks
---21/7/23-----
added timescaledb instead of influxdb
added event listener for data collection
---31/7/23-----
finished form fields
tweaked datacollection so that subcontroller can wait for it to start saving metrics to timescaledb
added hidebuttons button, showoptionals buttons for each event and show all notifications
fixed prom querries desynced (put them in the same try-catch block)
---1/8/23-----
added supportedFeatures to form
added converterToForm for update (failedEventReports not working)
---3/8/23-----
refactored client buttons
update and delete (+on client) (still have to do the controller part)
fixed datacollection errors when containers offline
---28/8/23----
added https with self signed certificates to server and client (TLS)
fixed broken pipe error by moving from config for resttemplate to local function 'createRestTemplateFactory()'
fixed some client buttons
added filtering by nfInstanceId,offset and past interval using timescaledb querries
decided on kafka architecture: publishers will push data (from timescaledbs in this example) 
	and the consumers will put it into the timescaledb the notifylistener currently uses
	(a seperate background thread will save the data to permanent storage (postgres) if needed)
---6/9/23----
fixed readme and db init configs
fixed dummy data gen (need to add supis)
fixed all nfload filters other than aoi and supi (+fix null nid error)
organised utilities in categories
---19/9/23----
fixed all nfload filters
added ue mobility filters
organised notificationutils
benchmarks
optimized notify listener speed (moved to connection pooling with max of 2000 connections)
---21/9/23----
added truncating for event_sub
added kafkaproducer & consumer
incorporated producer inside kafkadummydatalistener
implemented consumer with toggles and nested try catch blocks
added wakeUpDataProducer clauses in controller for kafka and kafka_local (test version for producing data in this project)
---25/9/23----
seperated colector in nwdaf_sub_collector project (compiles down to )
refactored listeners
added topics for kafka
added control messages for discover and wakeup
refactored producer & consumer
added synchronized message queue to consumer for discover topic
left todo: finish handling wakeUpDataProducer response & refactor producer, implement discover/wakeup in collector project 
---22/10/23----
finished wakeUpDataProducer & discover/wakeup comms
fixed kafka for nwdaf_sub & collector
setup scripts for build,run,run_all for the entire project
added redis cache
left todo: fix redis service filters
---05/11/23----
added useful scripts
removed @configuration
fix timing bugs
changed to redis stack
fixed hasData with discover topic
made custom mappers for nfload & uemobs
tried to optimize notifylistener with map of eventsub,notifs
---8/11/23-----
fixed ue_mobility
add truncate for notify
cleaned up perf logs & conditional props
automated certs
---9/11/23-----
install script
updated to 3.1.5
fix certs & split compose files
---12/11/23----
repo for UeMobs,added supi and groupid to schema & querry
fix remote debugger, foundNotification & formatting
---14/11/23----
java 21 , ue comm and fixes
ue comm table & repo, ue mob filters
---28/11/23----
add cron jobs,compressed tables,views to timescaleSchema
ue comm topic, notify optimizations, notif test db is now timescale, cleanup, fix notification table and service, more logging
kafka consumer optimization and syncing, bug fixes
admin panel with control signals, fixes, tried virtual threads
Create LICENSE
----2/12/23----
timescale pg16 (configs inside schemas)
notification save optimization (found -> notif_ref instead of body)
NWDAF has its own nfInstanceId and areaOfInterestId
----26/5/24----
filled in readme
split notifier and consumer and added scaling using new kafka topics
added notifier & consumer instanced to admin panel
fixed filters for AoI and visited areas, added list of AoI ids for visited areas in UeMobility
added areaOfInterestId to ue_mobility table
added AoI to ue_mobility filters
added area_of_interest table for registered AoIs and made notifier leader init AoIs from ExampleAoIs and NEF
replaced usage of example AoIs with registered AoIs map
added nef scenario topic that collector produces when the NEF scenario changes and NWDAF listens to
consumer builds mobility metrics matching NEF cells to AoI ids
clean up subscription controller
findAllIdsByActive to find all active subscription ids
findAllAssignedSubscriptions to find all assigned subscriptions by their ids
isDataBeingSaved to check if data is being saved to the db (optimization)
recalculateContainedAoIsInSubs to recalculate AoIs for all subscriptions
assigned Partition logic in kafka consumer
simplify compose files, moved db JPA params to db.env
fixed wait for data producer and kafka consumer bugs
removed prod url
added initSubscriptionRequest for client controller
cleaned up request builder
fixed mnc regex pattern in form
replace env variables in data listeners with @Value
changeUeMobilitiesTimeDependentProperties has offsetSeconds parameter
location infos file added for example visited areas to be used for generating ue mob metrics
add getNefAccessToken, getDefaultScenario, stopUEsAndReplaceDefaultScenario and updateNefScenario functions for full NEF automation
added static variables for selected and default scenarios
nefScenarios file to select scenario to import on startup to NEF using the index in the selected_scenario variable
added NEF credentials instead of token


TODO:

-expand filter for other nfload cases (setId,nfType,AOI...) DONE
-create job for pushing test data to timescaledb	DONE
-add optionals to nf load DONE
-add redis to client and showallsubs (+ choose a sub to update  or show latest notif)
-add past offset to notify DONE
-show metrics from each event notif object to client in a list	DONE
-implement thresholds & immediate reporting DONE
-make fake metrics for UE_Mobility and implement the use case DONE
-add second prometheus instance (implement data collection for list of prometheus instances) DONE (only left to scale the prom containers)
-add kafka broker inbetween to talk to timescaledbs through subscriptions DONE
-implement controller responses properly DONE (only redirects left)
-implement the rest of the event types
-add master client to view all subs	& admin to control for eventlisteners (notifiers & data collectors/generators)  IN PROGRESS
-add event listener that groups data with turncating in 60min timewindows with 1min averages and stores them permanently DONE
-graph grouped data with graphana IN PROGRESS
-look at using redis to replace timescaledb until allocated memory cache fills up IN PROGRESS
-look at paging & buffers for large amounts of subs & metrics
-scale with kubernetes
-setup open5GS & expose metrics from various NFs (like AMF)
-simulate a mobility scenario using a simulation tool on top of open5GS & gather months of data INPROGRESS (with NEF_Emulator)

ML stuff:
-do simple data analysis on grouped data (for example predict cpu usage)
-train an ml model that gives out predictions for cpu usage
-make notify request ml model for data
-add future offset to notify
